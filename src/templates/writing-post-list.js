import React from 'react'
import { graphql, Link } from 'gatsby'

//Layout
import Main from "../layouts/Main.js"

//CSS
import * as styles from '../css/components/writing/writinglist.module.css'

export default function writingPostList({ data, pageContext }) {

    const writing = data.allMarkdownRemark.nodes

    const { currentPage, numPages } = pageContext;
    const isFirst = currentPage === 1;
    const isLast = currentPage === numPages;
    const prevPagePath = currentPage - 1 === 1 ? '/writing' : '/writing/' + (currentPage - 1).toString();
    const nextPagePath = '/writing/' + (currentPage + 1).toString();

    const prevPageClass = isFirst ? styles.paginationDisabled : styles.paginationList;
    const nextPageClass = isLast ? styles.paginationDisabled : styles.paginationList;


    //Pagination Limits
    const paginationLimit = 5;
    let startPage = currentPage - 2;
    let endPage = currentPage + 2;
    
    if (startPage <= 0) {
      endPage -= (startPage -1);
      startPage = 1;
    }

    if (endPage > numPages) {
      endPage = currentPage + 1;
    }

    if (currentPage >= numPages - 2) {
      startPage = numPages - 4;
    }

    const getPageNumberPath = (currentIndex) => {
      if (currentIndex === 0) {
        return '/writing';
      }

      return '/writing/' + (currentIndex + 1)
    }    

    return (
        <div>

        <Main>
            <h2>Writing</h2>
            <p>Various musings, writeups, and documentation otherwise destined for the ether.</p>
            <p>Sort by: <Link to="/writing/tags">Tags</Link></p>

            <ul className={styles.writingList}>
                {writing.map(post => (
                <li key={post.id}>
                    <Link to={"/writing/" + post.frontmatter.slug}><h3>{post.frontmatter.title}</h3></Link>
                    <time>{post.frontmatter.date}</time>
                    <p>{post.frontmatter.description}</p>
                    <p>Tags: {post.frontmatter.tags.map((tag, i) => [
                      <span key={i}><Link to={"/writing/tags/" + tag}>
                        {tag}
                        </Link>
                        {i < post.frontmatter.tags.length - 1 ? ', ' : ''}
                      </span>
                    ])}</p>
                </li>
                ))}
            </ul>

          <div className={styles.writingPagination}>
            <Link className={prevPageClass} to={prevPagePath} rel="prev">Previous</Link>
            {Array.from({ length: numPages }, (_, i) => {
              let pageNumberClassName = styles.pageNumber;
              
              if(currentPage === i + 1) {
                pageNumberClassName = styles.paginationCurrent;
                <Link className={pageNumberClassName} key={i + 1} to={getPageNumberPath(i)}>{i + 1}</Link>
              }

              if(numPages > paginationLimit) {
                if(i + 1 >= startPage && i + 1 <= endPage) {
                  return (
                    <Link className={pageNumberClassName} key={i + 1} to={getPageNumberPath(i)}>{i + 1}</Link>
                  )
                } else {
                  return null;
                }
                
              } else {
                return (
                  <Link className={pageNumberClassName} key={i + 1} to={getPageNumberPath(i)}>{i + 1}</Link>
                )
              }


            })}
            <Link className={nextPageClass} to={nextPagePath} rel="next">Next</Link>
          </div>

        </Main>

        </div>
    )
}



export const query = graphql`
query postPaginationList($skip: Int!, $limit: Int!) {
    allMarkdownRemark(
      filter: {fileAbsolutePath: {regex: "/(writing)/"}}
      limit: $limit
      sort: {order: DESC, fields: frontmatter___date}
      skip: $skip
    ) {
      nodes {
        frontmatter {
          title
          slug
          tags
          description
          date(formatString: "MMM DD, YYYY")
        }
        id
      }
    }
  }
  
`