const path = require('path')

exports.createPages = async ({ graphql, actions}) => {
    const writingPost = await graphql(`
    query Posts {
        allMarkdownRemark(filter: {fileAbsolutePath: {regex: "/(writing)/"}}) {
          nodes {
            frontmatter {
              slug
            }
          }
        }
      }
    `)

    writingPost.data.allMarkdownRemark.nodes.forEach(node => {
        actions.createPage({
            path: '/writing/' + node.frontmatter.slug,
            component: path.resolve('./src/templates/writing-post.js'),
            context: { slug: node.frontmatter.slug }
        })
    })

    //Creating specific Tag pages

    const writingTag = await graphql(`
    query Tags {
        allMarkdownRemark(filter: {fileAbsolutePath: {regex: "/(writing)/"}}) {
          nodes {
            frontmatter {
              tags
            }
          }
        }
      }    
    `)

    writingTag.data.allMarkdownRemark.nodes.forEach(node => {
        node.frontmatter.tags.forEach(tag => {
            actions.createPage({
                path: '/writing/tags/' + tag,
                component: path.resolve('./src/templates/tag.js'),
                context: { writingtag: tag }
            })
        })
    })

    // Writing Page Pagination

    const postsResult = await graphql(`
    query postsList {
      allMarkdownRemark(filter: {fileAbsolutePath: {regex: "/(writing)/"}}) {
        edges {
          node {
            frontmatter {
              slug
            }
          }
        }
      }
    }   
    `)

    const posts = postsResult.data.allMarkdownRemark.edges;
    const postsPerPage = 5;
    const numPages = Math.ceil(posts.length / postsPerPage);

    Array.from({ length: numPages }).forEach((_, i) => {
      actions.createPage({
        path: i === 0 ? `/writing` : `/writing/${i + 1}`,
        component: path.resolve('./src/templates/writing-post-list.js'),
        context: {
          limit: postsPerPage,
          skip: i * postsPerPage,
          numPages,
          currentPage: i + 1,
        },
      });
    });
    


}