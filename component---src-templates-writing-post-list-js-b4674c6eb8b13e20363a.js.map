{"version":3,"file":"component---src-templates-writing-post-list-js-b4674c6eb8b13e20363a.js","mappings":"+OAUe,SAASA,EAAT,GAAiD,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAEtCC,EAAUF,EAAKG,kBAAkBC,MAE/BC,EAA0BJ,EAA1BI,YAAaC,EAAaL,EAAbK,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAeJ,EAAc,GAAM,EAAI,WAAa,aAAeA,EAAc,GAAGK,WACpFC,EAAe,aAAeN,EAAc,GAAGK,WAE/CE,EAAgBL,EAAUM,EAAAA,GAA4BA,EAAAA,GACtDC,EAAgBN,EAASK,EAAAA,GAA4BA,EAAAA,GAKvDE,EAAYV,EAAc,EAC1BW,EAAUX,EAAc,EAExBU,GAAa,IACfC,GAAYD,EAAW,EACvBA,EAAY,GAGVC,EAAUV,IACZU,EAAUX,EAAc,GAGtBA,GAAeC,EAAW,IAC5BS,EAAYT,EAAW,GAGzB,IAAMW,EAAoB,SAACC,GACzB,OAAqB,IAAjBA,EACK,WAGF,aAAeA,EAAe,IAGvC,OACI,2BAEE,gBAAC,IAAD,KACA,sDAGF,gBAAC,IAAD,KACI,qCACA,2GACA,qCAAY,gBAAC,KAAD,CAAMC,GAAG,iBAAT,SAEZ,sBAAIC,UAAWP,EAAAA,IACVX,EAAQmB,KAAI,SAAAC,GAAI,OACjB,sBAAIC,IAAKD,EAAKE,IACV,gBAAC,KAAD,CAAML,GAAI,YAAcG,EAAKG,YAAYC,MAAM,0BAAKJ,EAAKG,YAAYE,QACrE,4BAAOL,EAAKG,YAAYG,MACxB,yBAAIN,EAAKG,YAAYI,aACrB,kCAAUP,EAAKG,YAAYK,KAAKT,KAAI,SAACU,EAAKC,GAAN,MAAY,CAC9C,wBAAMT,IAAKS,GAAG,gBAAC,KAAD,CAAMb,GAAI,iBAAmBY,GACxCA,GAEAC,EAAIV,EAAKG,YAAYK,KAAKG,OAAS,EAAI,KAAO,cAO7D,uBAAKb,UAAWP,EAAAA,IACd,gBAAC,KAAD,CAAMO,UAAWR,EAAeO,GAAIV,EAAcyB,IAAI,QAAtD,YACCC,MAAMC,KAAK,CAAEH,OAAQ3B,IAAY,SAAC+B,EAAGL,GACpC,IAAIM,EAAsBzB,EAAAA,GAO1B,OALGR,IAAgB2B,EAAI,IACrBM,EAAsBzB,EAAAA,GACrB,KAAqDI,EAAkBe,IAGvE1B,EAhEW,EAiET0B,EAAI,GAAKjB,GAAaiB,EAAI,GAAKhB,EAE9B,gBAAC,KAAD,CAAMI,UAAWkB,EAAqBf,IAAKS,EAAI,EAAGb,GAAIF,EAAkBe,IAAKA,EAAI,GAG5E,KAKP,gBAAC,KAAD,CAAMZ,UAAWkB,EAAqBf,IAAKS,EAAI,EAAGb,GAAIF,EAAkBe,IAAKA,EAAI,MAMvF,gBAAC,KAAD,CAAMZ,UAAWN,EAAeK,GAAIR,EAAcuB,IAAI,QAAtD,a,6NCzGL,IAAIK,EAAc,yCACdC,EAAa,wCACbC,EAAoB,+CACpBC,EAAoB,+CACpBC,EAAqB,gDACrBC,EAAiB,4CACjBC,EAAoB,+CACpBC,EAAa","sources":["webpack://gatsby-starter-hello-world/./src/templates/writing-post-list.js","webpack://gatsby-starter-hello-world/./src/css/components/writing/writinglist.module.css"],"sourcesContent":["import React from 'react'\r\nimport { graphql, Link } from 'gatsby'\r\nimport { Helmet } from 'react-helmet';\r\n\r\n//Layout\r\nimport Main from \"../layouts/Main.js\"\r\n\r\n//CSS\r\nimport * as styles from '../css/components/writing/writinglist.module.css'\r\n\r\nexport default function writingPostList({ data, pageContext }) {\r\n\r\n    const writing = data.allMarkdownRemark.nodes\r\n\r\n    const { currentPage, numPages } = pageContext;\r\n    const isFirst = currentPage === 1;\r\n    const isLast = currentPage === numPages;\r\n    const prevPagePath = currentPage - 1 === 1 ? '/writing' : '/writing/' + (currentPage - 1).toString();\r\n    const nextPagePath = '/writing/' + (currentPage + 1).toString();\r\n\r\n    const prevPageClass = isFirst ? styles.paginationDisabled : styles.paginationList;\r\n    const nextPageClass = isLast ? styles.paginationDisabled : styles.paginationList;\r\n\r\n\r\n    //Pagination Limits\r\n    const paginationLimit = 5;\r\n    let startPage = currentPage - 2;\r\n    let endPage = currentPage + 2;\r\n    \r\n    if (startPage <= 0) {\r\n      endPage -= (startPage -1);\r\n      startPage = 1;\r\n    }\r\n\r\n    if (endPage > numPages) {\r\n      endPage = currentPage + 1;\r\n    }\r\n\r\n    if (currentPage >= numPages - 2) {\r\n      startPage = numPages - 4;\r\n    }\r\n\r\n    const getPageNumberPath = (currentIndex) => {\r\n      if (currentIndex === 0) {\r\n        return '/writing';\r\n      }\r\n\r\n      return '/writing/' + (currentIndex + 1)\r\n    }    \r\n\r\n    return (\r\n        <div>\r\n\r\n          <Helmet>\r\n          <title>Writing - malware.is</title>\r\n          </Helmet>\r\n\r\n        <Main>\r\n            <h2>Writing</h2>\r\n            <p>Various musings, writeups, and documentation otherwise destined for the ether.</p>\r\n            <p>Sort by: <Link to=\"/writing/tags\">Tags</Link></p>\r\n\r\n            <ul className={styles.writingList}>\r\n                {writing.map(post => (\r\n                <li key={post.id}>\r\n                    <Link to={\"/writing/\" + post.frontmatter.slug}><h3>{post.frontmatter.title}</h3></Link>\r\n                    <time>{post.frontmatter.date}</time>\r\n                    <p>{post.frontmatter.description}</p>\r\n                    <p>Tags: {post.frontmatter.tags.map((tag, i) => [\r\n                      <span key={i}><Link to={\"/writing/tags/\" + tag}>\r\n                        {tag}\r\n                        </Link>\r\n                        {i < post.frontmatter.tags.length - 1 ? ', ' : ''}\r\n                      </span>\r\n                    ])}</p>\r\n                </li>\r\n                ))}\r\n            </ul>\r\n\r\n          <div className={styles.writingPagination}>\r\n            <Link className={prevPageClass} to={prevPagePath} rel=\"prev\">Previous</Link>\r\n            {Array.from({ length: numPages }, (_, i) => {\r\n              let pageNumberClassName = styles.pageNumber;\r\n              \r\n              if(currentPage === i + 1) {\r\n                pageNumberClassName = styles.paginationCurrent;\r\n                <Link className={pageNumberClassName} key={i + 1} to={getPageNumberPath(i)}>{i + 1}</Link>\r\n              }\r\n\r\n              if(numPages > paginationLimit) {\r\n                if(i + 1 >= startPage && i + 1 <= endPage) {\r\n                  return (\r\n                    <Link className={pageNumberClassName} key={i + 1} to={getPageNumberPath(i)}>{i + 1}</Link>\r\n                  )\r\n                } else {\r\n                  return null;\r\n                }\r\n                \r\n              } else {\r\n                return (\r\n                  <Link className={pageNumberClassName} key={i + 1} to={getPageNumberPath(i)}>{i + 1}</Link>\r\n                )\r\n              }\r\n\r\n\r\n            })}\r\n            <Link className={nextPageClass} to={nextPagePath} rel=\"next\">Next</Link>\r\n          </div>\r\n\r\n        </Main>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport const query = graphql`\r\nquery postPaginationList($skip: Int!, $limit: Int!) {\r\n    allMarkdownRemark(\r\n      filter: {fileAbsolutePath: {regex: \"/(writing)/\"}}\r\n      limit: $limit\r\n      sort: {order: DESC, fields: frontmatter___date}\r\n      skip: $skip\r\n    ) {\r\n      nodes {\r\n        frontmatter {\r\n          title\r\n          slug\r\n          tags\r\n          description\r\n          date(formatString: \"MMM DD, YYYY\")\r\n        }\r\n        id\r\n      }\r\n    }\r\n  }\r\n  \r\n`","// extracted by mini-css-extract-plugin\nexport var writingList = \"writinglist-module--writingList--cBaye\";\nexport var breadcrumb = \"writinglist-module--breadcrumb--jZi2m\";\nexport var breadcrumbCurrent = \"writinglist-module--breadcrumbCurrent--TuGx9\";\nexport var writingPagination = \"writinglist-module--writingPagination--Bg2TT\";\nexport var paginationDisabled = \"writinglist-module--paginationDisabled--maPRd\";\nexport var paginationList = \"writinglist-module--paginationList--kZQ35\";\nexport var paginationCurrent = \"writinglist-module--paginationCurrent--MUZrz\";\nexport var pageNumber = \"writinglist-module--pageNumber--lJjLh\";"],"names":["writingPostList","data","pageContext","writing","allMarkdownRemark","nodes","currentPage","numPages","isFirst","isLast","prevPagePath","toString","nextPagePath","prevPageClass","styles","nextPageClass","startPage","endPage","getPageNumberPath","currentIndex","to","className","map","post","key","id","frontmatter","slug","title","date","description","tags","tag","i","length","rel","Array","from","_","pageNumberClassName","writingList","breadcrumb","breadcrumbCurrent","writingPagination","paginationDisabled","paginationList","paginationCurrent","pageNumber"],"sourceRoot":""}