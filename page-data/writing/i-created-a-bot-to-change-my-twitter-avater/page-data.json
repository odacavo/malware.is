{
    "componentChunkName": "component---src-templates-writing-post-js",
    "path": "/writing/i-created-a-bot-to-change-my-twitter-avater",
    "result": {"data":{"markdownRemark":{"html":"<h3>Follow me on Twitter! <a href=\"https://twitter.com/odacavo\">@odacavo</a></h3>\n<p>View the source code for this project: <a href=\"https://github.com/odacavo/twitter-avatar-bot/\">GitHub</a></p>\n<p><img src=\"https://camo.githubusercontent.com/9cb0d9435180515ad573fd7891456d39e564640c8c2f2bf399b77c77389a345a/68747470733a2f2f692e696d6775722e636f6d2f4864436265695a2e706e67\" alt=\"twitter-avatar-bot Cover Photo\">\r\n<span class='postImageCaption'>twitter-avatar-bot Cover Photo</span></p>\n<h2>My History with the Twitter API</h2>\n<p>I've played around with the Twitter API before to test out some other project ideas. In fact, in a younger and more naive life (a few years ago ðŸ˜³), I wrote a Twitter bot to parse <a href=\"https://open.canada.ca/data/en/dataset/792bb73a-f758-4459-b7e9-0c286a0bc15d\">Canada's War Honour Roll dataset</a> to recognize the respective men and women of the military who passed, \"on this day in history\". My app worked, and was tweeting! So much so that the Canadian Virtual War Memorial (CVWM) had acknowledged in support of the project. However, I did mention I was naive - and by that I mean I was far less security-aware.</p>\n<p>I pushed my changes to GitHub to show off this sweet project aaaand.... I woke up to find the Twitter account completely defaced! The amazing Twitter bot I created was now posting obscene messages and photos in a different language. I didn't do this! How did this happen? Someone had somehow accessed my trusted Twitter API endpoints to post their own media to the account I connected it to. That's when I quickly learned I had accidentally committed my Twitter API keys to GitHub, and hardcoded them without using environment variables.</p>\n<p>Now, this is obviously an embarrassing mistake - anyone who has done any sort of development before knows to hide API keys (they're literally called SECRETS!), especially when pushing a repository to the public Internet. I don't blame you for laughing at my ineptitude, but the silver lining is that I did learn from this. I also learned that there are bots that are constantly scanning GitHub for various API keys because they all use common syntax that can be searched. And when an API key is found, these bots will test them, and that's when they can become malicious.</p>\n<h2>twitter-avatar-bot</h2>\n<p>I wanted a unique avatar to use on various social media, my website, etc. to represent whatever an <em>odacavo</em> is. Yeah, <em>odacavo</em> is an anagram for <em>avocado</em> ðŸ¥‘, but I didn't want to use an icon of an avocado, because I didn't want to <a href=\"https://www.entrepreneur.com/article/354644\">get sued by Apple</a>. No, for real though. I messed around in Illustrator for a bit and came up with a simple ghost-looking thing.</p>\n<p><img src=\"/images/writing/i-created-a-bot-to-change-my-twitter-avatar/100.jpg\" alt=\"odacavo Avatar\">\r\n<span class='postImageCaption'>odacavo Avatar</span></p>\n<p>I've made a few tweaks since, but I've been using it almost every for about a year now. I realized though, it's such a simple icon and it would be cool to make it less static. Twitter <a href=\"https://www.dailydot.com/unclick/twitter-animated-gif-avatars/\">removed the option for animated avatars back in 2012</a>, so that was out of the question. I used to have one! It was sweet! I could have been grandfathered in if I never changed it.</p>\n<p>Anyways, I remembered that it was possible to change your Twitter profile picture through the API because of my previously embarrassing  mishap. I thought it might be cool to write a script to make the API call to change my profile picture every minute, hour, or day. It might be a little jarring if I changed it to completely different photos each time, so I decided to make a number of variations of my current avatar, just by swapping the colors around a bit. That way, it's still <em>me</em>, but I'll get a fresh variation of <em>me</em> every hour, on the hour! Did I mention I was bored and there's not much to do these days?</p>\n<p>Anyways, I started up a project using node.js, because I was familiar with doing some node projects in the past and knew that I could spin something up quickly and host it on Heroku.</p>\n<h2>twitter-api-v2</h2>\n<p>The crux of this project was solved by a well-maintained, light, yet powerful Twitter API client for Node.js called <a href=\"https://www.npmjs.com/package/twitter-api-v2\">twitter-api-v2</a>. This package does all of the heavy lifting and translating when it comes to making requests to Twitter's API.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"blackboard\" line-numbers=\"true\"  >\n          <code slot=\"code\">yarn add twitter-api-v2\r\n# or\r\nnpm i twitter-api-v2</code>\n        </deckgo-highlight-code>\n<p>If you don't yet have a Twitter API key, you must register your \"app\" on the <a href=\"https://developer.twitter.com/\">Twitter Developer Portal</a> and get approved for elevated access. You first have to be \"approved\", but it is as simple as filling out a few forms, and then you're given the required secrets. Ensure you set it to include \"write\" access, as we'll be making POST requests to the profile picture endpoint.</p>\n<p>From there, I created a simple <code>twitterClient.js</code> file to make the initial connections and configure my Twitter API keys.</p>\n<h3><code>twitterClient.js</code></h3>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\" line-numbers=\"true\"  >\n          <code slot=\"code\">//Require environment variables from .env file\r\nrequire(&#39;dotenv&#39;).config();\r\n\r\nconst { TwitterApi } = require(&#39;twitter-api-v2&#39;);\r\n\r\nconst twitterClient = new TwitterApi({\r\n    appKey: process.env.APPKEY,\r\n    appSecret: process.env.APPSECRET,\r\n    accessToken: process.env.ACCESSTOKEN,\r\n    accessSecret: process.env.ACCESSSECRET\r\n});\r\n\r\nconst rwClient = twitterClient.readWrite;\r\n\r\nmodule.exports = rwClient</code>\n        </deckgo-highlight-code>\n<p>You can see I'm using the NPM <a href=\"https://www.npmjs.com/package/dotenv\">dotenv</a> package to configure environment variables and tokenize my API keys. For a super simple tutorial on how to do this, check out <a href=\"https://www.youtube.com/watch?v=17UVejOw3zA\">The Coding Train on YouTube</a>.</p>\n<p>Then, I import the <code>twitter-api-v2</code> package and configure arguments for the required API keys. After which, I then simply export it as a read/write client for later use. I decided to partition the twitter \"client\" and my app logic into two separate files to differentiate them, but you could do this all in an <code>index.js</code> file.</p>\n<p>In my <code>index.js</code> file, I contain all of the logic to import the required packages, pick a random image, and set it as my profile picture inside an asynchronous function. I then use cron to schedule this function every hour.</p>\n<h3><code>index.js</code></h3>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"blackboard\" line-numbers=\"true\"  >\n          <code slot=\"code\">const rwClient = require(&#39;./twitterClient.js&#39;);\r\nconst CronJob = require(&quot;cron&quot;).CronJob;\r\n\r\n\r\n//Function to call the profile picture update API endpoint\r\nconst ppUpdate = async () =&gt; {\r\n    try {\r\n        //Select a random image index\r\n        const imagesLength = 25;\r\n        const randomIndex = Math.floor(Math.random() * imagesLength);\r\n        await rwClient.v1.updateAccountProfileImage(&#39;./images/&#39; + randomIndex + &#39;.png&#39;)\r\n        console.log(&quot;Profile picture updated to &quot; + randomIndex + &quot;.png&quot;)\r\n    } catch (e) {\r\n        console.error(e)\r\n    }\r\n}\r\n\r\n\r\n//Set the cron interval to run ppUpdate - curently set to every hour\r\nconst job = new CronJob(&quot;0 * * * *&quot;, () =&gt; {\r\n    ppUpdate()\r\n})\r\n\r\njob.start();</code>\n        </deckgo-highlight-code>\n<p>This script is purpose-built. I wanted it to pick a random image from an <code>/images</code> folder, and set that as my profile picture once an hour. Because of this, I didn't feel the need to have node look through the file system to randomly select an image by file-name. I saved a lot of time with this decision, and wrote the logic to just use <code>Math.random()</code> to pick a random number between 0 and the total number of images in the <code>/images</code> directory. Again, I'm not reading the file system here, so I hardcoded <code>25</code> because I have 25 images in my <code>/images</code> folder.</p>\n<p>To build the image's path, I just hardcode my directory <code>'./images/'</code>, add the randomly selected number, and tack on the file extension <code>.png</code>. My images folder contains images named <code>0.png</code> all the way up to <code>24.png</code> (computers count from 0). It's a simple hack for making a purpose-built script more lightweight.</p>\n<p>The rest of the script is twitter-api-v2 logic for making the request, error logging, and scheduling with <code>cron</code>. I use NPM's <a href=\"https://www.npmjs.com/package/cron\">cron</a> package to call the <code>ppUpdate</code> function every hour, on the hour with an arrow function <code>(\"0 * * * *\",</code>.</p>\n<h2>Conclusion</h2>\n<p>That's about it! It's nothing special, super simple, and probably serves itself for more elegant solutions out there, but this is the way I went about it. If you're trying this out yourself and have questions or issues, feel free to reach out on Twitter <a href=\"https://twitter.com/odacavo\">@odacavo</a> and I'll get back to you!</p>\n<p>View the source code for this project: <a href=\"https://github.com/odacavo/twitter-avatar-bot/\">GitHub</a></p>\n<h2>References:</h2>\n<ul>\n<li><a href=\"https://github.com/odacavo/twitter-avatar-bot/\">https://github.com/odacavo/twitter-avatar-bot/</a></li>\n<li><a href=\"https://www.npmjs.com/package/twitter-api-v2\">https://www.npmjs.com/package/twitter-api-v2</a></li>\n<li><a href=\"https://developer.twitter.com/en\">https://developer.twitter.com/en</a></li>\n<li><a href=\"https://www.npmjs.com/package/cron\">https://www.npmjs.com/package/cron</a></li>\n<li><a href=\"https://www.npmjs.com/package/dotenv\">https://www.npmjs.com/package/dotenv</a></li>\n<li><a href=\"https://www.npmjs.com/package/cron\">https://www.npmjs.com/package/cron</a></li>\n</ul>","frontmatter":{"date":"Mar 04, 2022","title":"I Created A Bot To Change My Twitter Avatar","tags":["development"],"description":"I got bored of having a static profile picture. I created the twitter-avatar-bot to automatically change my Twitter profile picture on a configurable schedule by pulling images from an images directory."},"timeToRead":6}},"pageContext":{"slug":"i-created-a-bot-to-change-my-twitter-avater"}},
    "staticQueryHashes": []}